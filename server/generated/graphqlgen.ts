// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql'
type Context = any
import { User } from './prisma'
import { Video } from './prisma'
import { Topic } from './prisma'
import { Tag } from './prisma'
import { Payload } from './prisma'
import { Complexity } from './prisma'
import { TopicOrderByInput } from './prisma'
import { TagOrderByInput } from './prisma'
import { UserOrderByInput } from './prisma'

export namespace QueryResolvers {
  export const defaultResolvers = {}

  export interface ArgsVideos {
    skip: number | null
    first: number | null
  }

  export interface ArgsVideo {
    id: string
  }

  export interface ArgsUser {
    login: string
  }

  export type VideosResolver = (
    parent: {},
    args: ArgsVideos,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Video[] | Promise<Video[]>

  export type VideoResolver = (
    parent: {},
    args: ArgsVideo,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Video | Promise<Video>

  export type UsersResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>

  export type UserResolver = (
    parent: {},
    args: ArgsUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>

  export type MeResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>

  export type TopicsResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Topic[] | Promise<Topic[]>

  export type TagsResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Tag[] | Promise<Tag[]>

  export interface Type {
    videos: (
      parent: {},
      args: ArgsVideos,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Video[] | Promise<Video[]>

    video: (
      parent: {},
      args: ArgsVideo,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Video | Promise<Video>

    users: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>

    user: (
      parent: {},
      args: ArgsUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>

    me: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>

    topics: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Topic[] | Promise<Topic[]>

    tags: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Tag[] | Promise<Tag[]>
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {}

  export interface TopicCreateManyInput {
    create: string
    connect: string
  }
  export interface TagCreateManyInput {
    create: string
    connect: string
  }

  export interface ArgsSignup {
    email: string
    password: string
    login: string
    name: string
  }

  export interface ArgsActivate {
    activationCode: string
  }

  export interface ArgsSendResetPasswordEmail {
    login: string
  }

  export interface ArgsResetPassword {
    passwordResetCode: string
    password: string
  }

  export interface ArgsSignin {
    login: string
    password: string
  }

  export interface ArgsEditProfile {
    name: string | null
    login: string | null
  }

  export interface ArgsAddVideo {
    ytId: string
    complexity: Complexity
    topics: TopicCreateManyInput
    tags: TagCreateManyInput
  }

  export interface ArgsBookmarkVideo {
    id: string
    adding: boolean
  }

  export type SignupResolver = (
    parent: {},
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Payload | Promise<Payload>

  export type ActivateResolver = (
    parent: {},
    args: ArgsActivate,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Payload | Promise<Payload>

  export type SendResetPasswordEmailResolver = (
    parent: {},
    args: ArgsSendResetPasswordEmail,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Payload | Promise<Payload>

  export type ResetPasswordResolver = (
    parent: {},
    args: ArgsResetPassword,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Payload | Promise<Payload>

  export type SigninResolver = (
    parent: {},
    args: ArgsSignin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>

  export type SignoutResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Payload | Promise<Payload>

  export type EditProfileResolver = (
    parent: {},
    args: ArgsEditProfile,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>

  export type AddVideoResolver = (
    parent: {},
    args: ArgsAddVideo,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Video | Promise<Video>

  export type BookmarkVideoResolver = (
    parent: {},
    args: ArgsBookmarkVideo,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Video | Promise<Video>

  export interface Type {
    signup: (
      parent: {},
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Payload | Promise<Payload>

    activate: (
      parent: {},
      args: ArgsActivate,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Payload | Promise<Payload>

    sendResetPasswordEmail: (
      parent: {},
      args: ArgsSendResetPasswordEmail,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Payload | Promise<Payload>

    resetPassword: (
      parent: {},
      args: ArgsResetPassword,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Payload | Promise<Payload>

    signin: (
      parent: {},
      args: ArgsSignin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>

    signout: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Payload | Promise<Payload>

    editProfile: (
      parent: {},
      args: ArgsEditProfile,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>

    addVideo: (
      parent: {},
      args: ArgsAddVideo,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Video | Promise<Video>

    bookmarkVideo: (
      parent: {},
      args: ArgsBookmarkVideo,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Video | Promise<Video>
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    isActivated: (parent: User) =>
      parent.isActivated === undefined ? null : parent.isActivated,
    login: (parent: User) => parent.login,
    email: (parent: User) => parent.email,
    name: (parent: User) => parent.name,
  }

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type IsActivatedResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type LoginResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>

  export type VideosAddedResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Video[] | Promise<Video[]>

  export type VideosBookmarkedResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Video[] | Promise<Video[]>

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>

    isActivated: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>

    login: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>

    videosAdded: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Video[] | Promise<Video[]>

    videosBookmarked: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Video[] | Promise<Video[]>
  }
}

export namespace VideoResolvers {
  export const defaultResolvers = {
    id: (parent: Video) => parent.id,
    ytId: (parent: Video) => parent.ytId,
    complexity: (parent: Video) => parent.complexity,
  }

  export interface TopicWhereInput {
    value: string
    value_not: string
    value_in: string
    value_not_in: string
    value_lt: string
    value_lte: string
    value_gt: string
    value_gte: string
    value_contains: string
    value_not_contains: string
    value_starts_with: string
    value_not_starts_with: string
    value_ends_with: string
    value_not_ends_with: string
    text: string
    text_not: string
    text_in: string
    text_not_in: string
    text_lt: string
    text_lte: string
    text_gt: string
    text_gte: string
    text_contains: string
    text_not_contains: string
    text_starts_with: string
    text_not_starts_with: string
    text_ends_with: string
    text_not_ends_with: string
    AND: string
    OR: string
    NOT: string
  }
  export interface TagWhereInput {
    value: string
    value_not: string
    value_in: string
    value_not_in: string
    value_lt: string
    value_lte: string
    value_gt: string
    value_gte: string
    value_contains: string
    value_not_contains: string
    value_starts_with: string
    value_not_starts_with: string
    value_ends_with: string
    value_not_ends_with: string
    text: string
    text_not: string
    text_in: string
    text_not_in: string
    text_lt: string
    text_lte: string
    text_gt: string
    text_gte: string
    text_contains: string
    text_not_contains: string
    text_starts_with: string
    text_not_starts_with: string
    text_ends_with: string
    text_not_ends_with: string
    AND: string
    OR: string
    NOT: string
  }
  export interface UserWhereInput {
    id: string
    id_not: string
    id_in: string
    id_not_in: string
    id_lt: string
    id_lte: string
    id_gt: string
    id_gte: string
    id_contains: string
    id_not_contains: string
    id_starts_with: string
    id_not_starts_with: string
    id_ends_with: string
    id_not_ends_with: string
    activationCode: string
    passwordResetCode: string
    isActivated: boolean
    isActivated_not: boolean
    login: string
    login_not: string
    login_in: string
    login_not_in: string
    login_lt: string
    login_lte: string
    login_gt: string
    login_gte: string
    login_contains: string
    login_not_contains: string
    login_starts_with: string
    login_not_starts_with: string
    login_ends_with: string
    login_not_ends_with: string
    email: string
    email_not: string
    email_in: string
    email_not_in: string
    email_lt: string
    email_lte: string
    email_gt: string
    email_gte: string
    email_contains: string
    email_not_contains: string
    email_starts_with: string
    email_not_starts_with: string
    email_ends_with: string
    email_not_ends_with: string
    password: string
    password_not: string
    password_in: string
    password_not_in: string
    password_lt: string
    password_lte: string
    password_gt: string
    password_gte: string
    password_contains: string
    password_not_contains: string
    password_starts_with: string
    password_not_starts_with: string
    password_ends_with: string
    password_not_ends_with: string
    name: string
    name_not: string
    name_in: string
    name_not_in: string
    name_lt: string
    name_lte: string
    name_gt: string
    name_gte: string
    name_contains: string
    name_not_contains: string
    name_starts_with: string
    name_not_starts_with: string
    name_ends_with: string
    name_not_ends_with: string
    videosAdded_every: string
    videosAdded_some: string
    videosAdded_none: string
    videosBookmarked_every: string
    videosBookmarked_some: string
    videosBookmarked_none: string
    AND: string
    OR: string
    NOT: string
  }

  export interface ArgsTopics {
    where: TopicWhereInput | null
    orderBy: TopicOrderByInput | null
    skip: number | null
    after: string | null
    before: string | null
    first: number | null
    last: number | null
  }

  export interface ArgsTags {
    where: TagWhereInput | null
    orderBy: TagOrderByInput | null
    skip: number | null
    after: string | null
    before: string | null
    first: number | null
    last: number | null
  }

  export interface ArgsBookmarkers {
    where: UserWhereInput | null
    orderBy: UserOrderByInput | null
    skip: number | null
    after: string | null
    before: string | null
    first: number | null
    last: number | null
  }

  export type IdResolver = (
    parent: Video,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type YtIdResolver = (
    parent: Video,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type ComplexityResolver = (
    parent: Video,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Complexity | Promise<Complexity>

  export type TopicsResolver = (
    parent: Video,
    args: ArgsTopics,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Topic[] | Promise<Topic[]>

  export type TagsResolver = (
    parent: Video,
    args: ArgsTags,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Tag[] | Promise<Tag[]>

  export type AdderResolver = (
    parent: Video,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>

  export type BookmarkersResolver = (
    parent: Video,
    args: ArgsBookmarkers,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>

  export interface Type {
    id: (
      parent: Video,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>

    ytId: (
      parent: Video,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>

    complexity: (
      parent: Video,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Complexity | Promise<Complexity>

    topics: (
      parent: Video,
      args: ArgsTopics,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Topic[] | Promise<Topic[]>

    tags: (
      parent: Video,
      args: ArgsTags,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Tag[] | Promise<Tag[]>

    adder: (
      parent: Video,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>

    bookmarkers: (
      parent: Video,
      args: ArgsBookmarkers,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>
  }
}

export namespace TopicResolvers {
  export const defaultResolvers = {
    value: (parent: Topic) => parent.value,
    text: (parent: Topic) => parent.text,
  }

  export type ValueResolver = (
    parent: Topic,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type TextResolver = (
    parent: Topic,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export interface Type {
    value: (
      parent: Topic,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>

    text: (
      parent: Topic,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>
  }
}

export namespace TagResolvers {
  export const defaultResolvers = {
    value: (parent: Tag) => parent.value,
    text: (parent: Tag) => parent.text,
  }

  export type ValueResolver = (
    parent: Tag,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type TextResolver = (
    parent: Tag,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export interface Type {
    value: (
      parent: Tag,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>

    text: (
      parent: Tag,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>
  }
}

export namespace PayloadResolvers {
  export const defaultResolvers = {
    message: (parent: Payload) => parent.message,
  }

  export type MessageResolver = (
    parent: Payload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export interface Type {
    message: (
      parent: Payload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type
  Mutation: MutationResolvers.Type
  User: UserResolvers.Type
  Video: VideoResolvers.Type
  Topic: TopicResolvers.Type
  Tag: TagResolvers.Type
  Payload: PayloadResolvers.Type
}
